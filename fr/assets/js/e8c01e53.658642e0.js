(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1545],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return p}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=c(n),p=s,h=m["".concat(l,".").concat(p)]||m[p]||u[p]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function p(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7101:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=["components"],i={sidebar_position:2},l="Notions de base sur les interactions des contrats intelligents",c={unversionedId:"smart-contract-interaction/interact",id:"smart-contract-interaction/interact",isDocsHomePage:!1,title:"Notions de base sur les interactions des contrats intelligents",description:"As mentioned before, smart contracts are executable codes. Dans les prochaines le\xe7ons, nous apprendrons \xe0 en \xe9crire un. Until then, it's best to use what's already written to keep things simple. We will dive into two options for deploying and interacting with contracts: wasmd and CosmJS",source:"@site/i18n/fr/docusaurus-plugin-content-docs-dev-academy/current/smart-contract-interaction/02-interact.md",sourceDirName:"smart-contract-interaction",slug:"/smart-contract-interaction/interact",permalink:"/fr/dev-academy/smart-contract-interaction/interact",editUrl:"https://crowdin.com/project/cosmwasm-docs/fr",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"devAcademy",previous:{title:"Que sont les contrats intelligents ?",permalink:"/fr/dev-academy/smart-contract-interaction/what-is-smart-contracts"},next:{title:"D\xe9fi",permalink:"/fr/dev-academy/smart-contract-interaction/challenge"}},d=[{value:"O\xf9 trouver des contrats intelligents ?",id:"o\xf9-trouver-des-contrats-intelligents-",children:[]},{value:"T\xe9l\xe9charger",id:"t\xe9l\xe9charger",children:[]},{value:"wasmd",id:"wasmd",children:[{value:"Store (base de donn\xe9es)",id:"store-base-de-donn\xe9es",children:[]},{value:"Instantiate",id:"instantiate",children:[]}]},{value:"CosmJS",id:"cosmjs",children:[{value:"Configuration du client",id:"configuration-du-client",children:[]},{value:"Recharger son portefeuille",id:"reloading-your-wallet",children:[]}]}],u={toc:d};function m(e){var t=e.components,n=(0,s.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"notions-de-base-sur-les-interactions-des-contrats-intelligents"},"Notions de base sur les interactions des contrats intelligents"),(0,o.kt)("p",null,"As mentioned before, smart contracts are executable codes. Dans les prochaines le\xe7ons, nous apprendrons \xe0 en \xe9crire un. Until then, it's best to use what's already written to keep things simple. We will dive into two options for deploying and interacting with contracts: ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"CosmJS")),(0,o.kt)("h2",{id:"o\xf9-trouver-des-contrats-intelligents-"},"O\xf9 trouver des contrats intelligents ?"),(0,o.kt)("p",null,"Normalement, nous compilons les contrats intelligents en utilisant des compilateurs rust puis des optimiseurs de code. Maintenant, nous allons simplement t\xe9l\xe9charger une version pr\xe9compil\xe9e par l'\xe9quipe cosmwasm."),(0,o.kt)("h2",{id:"t\xe9l\xe9charger"},"T\xe9l\xe9charger"),(0,o.kt)("p",null,"Nous fournissons l'ex\xe9cutable binaire de smart contract \xe0 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/"},"cw-plus")," repo \xe0 c\xf4t\xe9 du code. cw-plus repository is a collection of production-grade smart contracts that has been heavily tested on real mainnets. Vous verrez une liste des contrats disponibles sur la page du r\xe9f\xe9rentiel. Allez cliquer sur le bouton ",(0,o.kt)("strong",{parentName:"p"},"Releases")," pour voir les ex\xe9cutables binaires \xe9tiquet\xe9s. Vous pouvez t\xe9l\xe9charger des binaires et les d\xe9ployer sur les blockchains compatibles."),(0,o.kt)("p",null,"Nous utiliserons le binaire pr\xe9compil\xe9 cw20 pour ce cours : ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/releases/download/v0.8.0/cw20_base.wasm"},"cw20-base")),(0,o.kt)("p",null,"Please don't pay attention to cw20-base details for now, just focus on getting a contract on a testnet."),(0,o.kt)("h2",{id:"wasmd"},"wasmd"),(0,o.kt)("h3",{id:"store-base-de-donn\xe9es"},"Store (base de donn\xe9es)"),(0,o.kt)("p",null,"Nous allons d\xe9ployer le code en utilisant ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd")," CLI que nous avons install\xe9 plus t\xf4t."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"curl -LJO https://github.com/CosmWasm/cw-plus/releases/download/v0.8.0/cw20_base.wasm\nRES=$(wasmd tx wasm store cw20_base.wasm --from wallet $TXFLAG -y)\n\n# obtenir l'identifiant du code\nCODE_ID=$(echo $RES | jq -r '.logs[0].events[1].attributes[0].value')\n\n# imprimer l'identifiant du code\necho $CODE_ID\n\n# pas encore de contrat, ceci devrait retourner une liste vide\nwasmd query wasm list-contract-by-code $CODE_ID $NODE --output json\n\n")),(0,o.kt)("p",null,"Maintenant le code stock\xe9 sur le r\xe9seau. ",(0,o.kt)("inlineCode",{parentName:"p"},"CODE_ID")," est l'identifiant du code."),(0,o.kt)("h3",{id:"instantiate"},"Instantiate"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Code du contrat intelligent != instance de contrat intelligent utilisable")),(0,o.kt)("p",null,"Le code d'un contrat intelligent n'est qu'un plan d'un contrat intelligent. Nous ",(0,o.kt)("em",{parentName:"p"},"instan\xe7ons")," un contrat intelligent bas\xe9 sur le code du contrat intelligent ."),(0,o.kt)("p",null,"Voici le message d'instanciation :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "Golden Stars",\n  "symbol": "STAR",\n  "decimals": "2",\n  "initial_balances": [\n    {"address": "wasm1ez03me7uljk7qerswdp935vlaa4dlu48mys3mq", "amount": "10000"},\n    {"address": "wasm1tx7ga0lsnumd5hfsh2py0404sztnshwqaqjwy8", "amount": "10000"},\n    {"address": "wasm1mvjtezrn8dpateu0435trlw5062qy76gf738n0", "amount": "10000"}\n  ],\n  "mint": {\n    "minter": "wasm1mvjtezrn8dpateu0435trlw5062qy76gf738n0"\n  }\n}\n')),(0,o.kt)("p",null,"Ce message contient l'\xe9tat initial du contrat."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'INIT=$(jq -n --arg wallet $(wasmd keys show -a wallet) \'{"name" : "Golden Stars", "symbol" : "STAR", "decimals":2, "initial_balances" :[{"address" :"wasm1n8aqd9jq9glhj87cn0nkmd5mslz3df8zm86hrh", "amount" : "10000"},{"address" : "wasm13y4tpsgxza44yq76qvj69sakq4jmeyqudwgwpk", "amount" : "10000"},{"address" :$wallet, "amount" : "10000"}], "mint":{"minter" :$wallet}}\')\n\nwasmd tx wasm instantiate $CODE_ID "$INIT" --from wallet $TXFLAG --label "first cw20"\n')),(0,o.kt)("p",null,"Vous verrez cette sortie indiquant que la transaction d'instanciation est r\xe9ussie :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "height" : "1350700",\n  "txhash" : "82D7240A35BDC6DE307AA725FE52590E83B60D4B682ABB0B0F6DCA28A66212D9",\n  "data" : "0A3C0A0B696E7374616E7469617465122D0A2B7761736D3170657A74676C397661677768346B3574677765366E367475397338686A7779716D6C6D72686B",\n  "raw_log" : "[{\\"events\\" :[{\\"type\\":\\"message\\",\\"attributes\\" :[{\\"key\\":\\"action\\",\\"value\\":\\"instantiate\\"},{\\"key\\":\\"module\\",\\"value\\" :\\"wasm\\"},{\\"key\\":\\"signer\\",\\"value\\":\\"wasm10qhh60sexwtzd6nqr4r34z6t2d7nfrqp684twu\\"},{\\"key\\":\\"code_id\\",\\"value\\" :\\"135\\"},{\\"key\\":\\"contract_address\\",\\"value\\":\\"wasm1peztgl9vagwh4k5tgwe6n6tu9s8hjwyqmlmrhk\\"}]},{\\"type\\":\\"wasm\\",\\"attributes\\" :[{\\"key\\":\\"contract_address\\",\\"value\\":\\"wasm1peztgl9vagwh4k5tgwe6n6tu9s8hjwyqmlmrhk\\"}]}]}]",\n  "logs" : [\n    {\n      "events" : [\n        {\n          "type" : "message",\n          "attributes" : [\n            {\n              "key" : "action",\n              "value" : "instantiate"\n            },\n            {\n              "key" : "module",\n              "value" : "wasm"\n            },\n            {\n              "key" : "signer",\n              "value" : "wasm10qhh60sexwtzd6nqr4r34z6t2d7nfrqp684twu"\n            },\n            {\n              "key" : "code_id",\n              "value" : "135"\n            },\n            {\n              "key" : "contract_address",\n              "value" : "wasm1peztgl9vagwh4k5tgwe6n6tu9s8hjwyqmlmrhk"\n            }\n          ]\n        },\n        {\n          "type" : "wasm",\n          "attributes" : [\n            {\n              "key" : "contract_address",\n              "value" : "wasm1peztgl9vagwh4k5tgwe6n6tu9s8hjwyqmlmrhk"\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  "gas_wanted" : "185650",\n  "gas_used" : "155257"\n}\n')),(0,o.kt)("p",null,"This command from before should now output the instantiated contract address."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"wasmd query wasm list-contract-by-code $CODE_ID $NODE --output json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "contracts": [\n    "wasm1peztgl9vagwh4k5tgwe6n6tu9s8hjwyqmlmrhk"\n  ],\n  "pagination": {}\n}\n')),(0,o.kt)("p",null,"Now we have a ready to use instantiated contract. As you can see, you need a lot of shell JSON manipulation for command line interaction. This is just dirty work... Luckily we have a better option."),(0,o.kt)("h2",{id:"cosmjs"},"CosmJS"),(0,o.kt)("p",null,"CosmJS is the Swiss Army knife to power JavaScript based client solutions ranging from Web apps/explorers over browser extensions to server-side clients like faucets/scrapers in the Cosmos ecosystem."),(0,o.kt)("p",null,"CosmJS contains all the functions you need to interact with Cosmos SDK clients. Its use ranges from exchanges, block explorers to basic scripts, including smart contract execution."),(0,o.kt)("p",null,"For this tutorial, we will explore CosmWasm side of CosmJS."),(0,o.kt)("h3",{id:"configuration-du-client"},"Configuration du client"),(0,o.kt)("p",null,"The first step before doing anything is ensuring we can create an account and connect to the chain. You will always use the following command to start up the ",(0,o.kt)("inlineCode",{parentName:"p"},"@cosmjs/cli")," with some cw20-specific helpers preloaded (in addition to all the general helpers it has)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npx @cosmjs/cli@^0.26 --init https://raw.githubusercontent.com/CosmWasm/cw-plus/v0.9.0/contracts/cw20-base/helpers.ts\n")),(0,o.kt)("p",null,"Now you will see a REPL client."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const [addr, client] = await useOptions(pebblenetOptions).setup('password');\nclient.getAccount(addr);\n")),(0,o.kt)("p",null,"This will take a few seconds as we hit the faucet the first time to ensure you have some tokens in your account to pay fees. When it returns, you should see something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  address: 'wasm1w740h56j9nhudykkm80j5rf6ms25nhe9huuvgp',\n  pubkey: {\n    type: 'tendermint/PubKeySecp256k1',\n    value: 'AkjSrJA0XT612qHvnHieHAebZ+cIA2jq3LRj0g4V/lOF'\n  },\n  accountNumber: 323,\n  sequence: 4\n}\n")),(0,o.kt)("h3",{id:"reloading-your-wallet"},"Recharger son portefeuille"),(0,o.kt)("p",null,"You can keep typing in the shell, or close it and run some sections later. Always start off with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const [addr, client] = await useOptions(pebblenetOptions).setup(PASSWORD_HERE);\n")),(0,o.kt)("p",null,"to set up your client. ",(0,o.kt)("inlineCode",{parentName:"p"},"useOptions")," takes the pebblenet configuration from everything from URLs to tokens to bech32prefix. When you call ",(0,o.kt)("inlineCode",{parentName:"p"},"setup")," with a password, it checks for ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.pebblenet.key")," and creates a new key if it is not there, otherwise it loads the key from the file. Your private key ( actually mnemonic) is stored encrypted, and you need the same password to use it again. Try ",(0,o.kt)("inlineCode",{parentName:"p"},"cat ~/.pebblenet.key")," to prove to yourself that it is indeed encrypted, or try reloading with a different password."),(0,o.kt)("p",null,"If you want the mnemonic, you can recover it at anytime, as long as you still have the file and the password. You could use this later to recover, or use the same mnemonic to import the key into the ",(0,o.kt)("inlineCode",{parentName:"p"},"pebblenet")," cli tool."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"useOptions(pebblenetOptions).recoverMnemonic(YOUR_PASSWORD_HERE)\n")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"This command saves the key to ",(0,o.kt)("inlineCode",{parentName:"h5"},"~/.pebblenet.key")," encrypted. If you forget the password, either delete it or pass a ",(0,o.kt)("inlineCode",{parentName:"h5"},"filename")," along with a password to create a new key. :::")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Also, try this with a invalid password and see how it fails."),(0,o.kt)("p",{parentName:"div"},"Now that you feel a bit more secure about your keys (and ability to load them later), let's get into working with some contracts."),(0,o.kt)("h3",{parentName:"div",id:"example-star"},"Exemple : STAR"),(0,o.kt)("p",{parentName:"div"},'The first contract I uploaded was STAR tokens, or "Golden Stars" to be distribute to the ',(0,o.kt)("a",{parentName:"p",href:"https://block-explorer.pebblenet.cosmwasm.com/validators"},"first 3 validators")," on the network."),(0,o.kt)("p",{parentName:"div"},"Please do not copy this verbatim, but look to see how such a contract is set up and deployed the first time."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const [addr, client] = await useOptions(pebblenetOptions).setup(PASSWORD_HERE);\n\nconst cw20 = CW20(client, pebblenetOptions.fees);\nconst codeId = await cw20.upload(addr);\nconsole.log(`CodeId: ${codeId}`);\n// output: 55\n\n// enable REPL editor mode to edit multiline code then execute\n.editor\nconst initMsg = {\n  name: "Golden Stars",\n  symbol: "STAR",\n  decimals: 2,\n  // list of all validator self-delegate addresses - 100 STARs each!\n  initial_balances: [\n    {address: "wasm13krn38qhu83y5xvmjgydnk5vjau2u3c0tv5jsu", amount: "10000"},\n    {address: "wasm1ppgpwep3yzh8w3d89xlzlens3420j5vs5q3p4j", amount: "10000"},\n    {address: "wasm1fnx5jzqsdkntlq2nspjgswtezf45u5ug3kq9sw", amount: "10000"},\n  ],\n  mint: {\n    minter: addr,\n  },\n};\n// exit editor using `^D` and execute entered code\n^\nD\n\nconst contract = await cw20.instantiate(addr, codeId, initMsg, "STAR");\nconsole.log(`Contract: ${contract.contractAddress}`);\n// Contract: wasm14wm5jvsm6r896tcqsx9dlxc8h0w2mg5de39dsm\n\nconsole.log(await contract.balance("wasm13krn38qhu83y5xvmjgydnk5vjau2u3c0tv5jsu"));\n// 10000\nconsole.log(await contract.balance(contract.contractAddress));\n// 0\n')),(0,o.kt)("h3",{parentName:"div",id:"spin-nouveau-contrat"},"Spin Nouveau Contrat"),(0,o.kt)("p",{parentName:"div"},"Now that we have that uploaded, we can easily make a second contract. This one, please do run through and customize the field names and token amounts before entering them."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const [addr, client] = await useOptions(pebblenetOptions).setup(PASSWORD_HERE);\nconst cw20 = CW20(client, pebblenetOptions.fees);\n\n.editor\nconst initMsg = {\n  name: "My Coin",\n  symbol: "MINE",\n  decimals: 6,\n  initial_balances: [\n    {address: addr, amount: "12345678000"},\n  ],\n  mint: {\n    minter: addr,\n    cap: "99900000000"\n  },\n};\n^\nD\n\nconst codeId = 55;\nconst mine = await cw20.instantiate(addr, codeId, initMsg, "MINE");\nconsole.log(`Contract: ${mine.contractAddress}`);\n// Contract: wasm10ajume5hphs9gcrpl9mw2m96fv7qu0q7esznj2\n\n// now, check the configuration\nmine.balance(addr);\nmine.tokenInfo()\nmine.minter()\n')),(0,o.kt)("p",{parentName:"div"},"Look, you're rich now! Time to share the wealth."),(0,o.kt)("h3",{parentName:"div",id:"using-contract"},"Utilisation de contrat"),(0,o.kt)("p",{parentName:"div"},"In this section, we will show you how to use your newly constructed token. You can keep typing along in the same REPL that you used to create the ",(0,o.kt)("inlineCode",{parentName:"p"},"MINE")," tokens (or whatever better name you invented), but if you closed it down and come back, here's how to re-connect:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const [addr, client] = await useOptions(pebblenetOptions).setup(PASSWORD_HERE);\nconst cw20 = CW20(client, pebblenetOptions.fees);\n\n// if you forgot your address, but remember your label, you can find it again\nconst contracts = await client.getContracts(55)\ncontracts\nconst contractAddress = contracts.filter(x => x.label === 'MINE')[0].address;\n\n// otherwise, you can just cut and paste from before\nconst contractAddress = \"wasm14wm5jvsm6r896tcqsx9dlxc8h0w2mg5de39dsm\"\n\n// now, connect to that contract and make sure it is yours\nconst mine = cw20.use(contractAddress);\nmine.tokenInfo()\nmine.minter()\nmine.balance(addr)\n")),(0,o.kt)("p",{parentName:"div"},"Okay, you are connected to your contract. Let's see what cw20 is capable of. Here I will show you how you can mint tokens (you did give yourself that special permission on init, right?) and transfer tokens to other users."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const someone = "wasm13nt9rxj7v2ly096hm8qsyfjzg5pr7vn56p3cay";\nconst other = "wasm1ve2n9dd4uy48hzjgx8wamkc7dp7sfdv82u585d";\n\n// right now, only you have tokens\nmine.balance(addr)\nmine.balance(someone)\nmine.balance(other)\n// and watch the total\nmine.tokenInfo()\n\n// let\'s mint some tokens for someone\nmine.mint(addr, someone, "999888000")\n// Bonus, take the tx hash printed out and cut-paste that into https://bigdipper.wasmnet.cosmwasm.com\n// eg 26D5514CF437EE584793768B56CB4E605F1F6E61FC0123030DC64E08E2EE97FA\n\n// See balances updated\nmine.balance(someone)\nmine.balance(addr)\n// and the supply goes up\nmine.tokenInfo()\n\n// Okay, now let\'s transfer some tokens... that is the more normal one, right?\nmine.transfer(addr, other, "4567000");\n// eg. 4A76EFFEB09C82D0FEB97C3B5A9D5BADB6E9BD71F4EF248A3EF8B232C2F7262A\nmine.balance(other)\nmine.balance(addr)\n')))))}m.isMDXComponent=!0}}]);